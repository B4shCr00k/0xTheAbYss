<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
    <channel>
        <title>Pe Loading on B4shCr00k</title>
        <link>https://B4shCr00k.github.io/TheAbYss/tags/pe-loading/</link>
        <description>Recent content in Pe Loading on B4shCr00k</description>
        <generator>Hugo -- gohugo.io</generator>
        <language>en-us</language>
        <lastBuildDate>Tue, 22 Jul 2025 00:00:00 +0000</lastBuildDate><atom:link href="https://B4shCr00k.github.io/TheAbYss/tags/pe-loading/index.xml" rel="self" type="application/rss+xml" /><item>
        <title>Resolving Imports Remotely</title>
        <link>https://B4shCr00k.github.io/TheAbYss/posts/resolving-imports-remotely/</link>
        <pubDate>Tue, 22 Jul 2025 00:00:00 +0000</pubDate>
        
        <guid>https://B4shCr00k.github.io/TheAbYss/posts/resolving-imports-remotely/</guid>
        <description>&lt;img src="https://B4shCr00k.github.io/TheAbYss/posts/resolving-imports-remotely/nice.jpg" alt="Featured image of post Resolving Imports Remotely" /&gt;&lt;h1 id=&#34;what-are-imports&#34;&gt;what are imports
&lt;/h1&gt;&lt;p&gt;basically imports are functions a pe needs to function properly, these functions are located inside dlls (dynamic link libraries) so first the executable needs to load the dll then find the functions he needs and get their addresses&lt;/p&gt;
&lt;p&gt;now in order to know which functions an executable needs there is something called the IAT table which is a table inside the import directory in the pe structure, this table contains all the names of the functions the exe (or the dll) needs as well as their addresses&lt;/p&gt;
&lt;p&gt;when the exe first lunches the iat will be empty just names but no addresses so windows automatically reads this table, finds which dlls contains the functions, loads them using a function called &lt;code&gt;LoadLibraryA()&lt;/code&gt; which will patch this table with then use something like &lt;code&gt;GetProcAddress()&lt;/code&gt; to get the function addresses then patch the iat table with the correct addresses so the exe now works well&lt;/p&gt;
&lt;h1 id=&#34;what-is-manual-loading&#34;&gt;What is Manual Loading
&lt;/h1&gt;&lt;p&gt;instead of letting windows do all the stuff i just mentioned we do everything manually, Why? for a lot of reasons like windows uses high-level api functions like &lt;code&gt;LoadLibraryA()&lt;/code&gt; or &lt;code&gt;GetProcAddress()&lt;/code&gt; which in case the system has an edr installed will def be hooked therefore your malware will immedieatly gets detected to avoid this we manually patch the iat table&lt;/p&gt;
&lt;h1 id=&#34;how-is-it-done&#34;&gt;how is it done
&lt;/h1&gt;&lt;p&gt;first of all since we are dealing with a pe you need to parse the pe and get the ntheader, this guide is about remotely resolving imports but in order to do so you would have to first write the pe into the target process with all the headers and sections&lt;/p&gt;
&lt;p&gt;so first of all&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;get the import directory rva (relative virtual address) which is stored in
&lt;code&gt;ntHeader-&amp;gt;OptionalHeader.DataDirectory[IMAGE_DIRECTORY_ENTRY_IMPORT].VirtualAddress&lt;/code&gt;
where IMAGE_DIRECTORY_ENTRY_IMPORT is a macro for 1&lt;/li&gt;
&lt;/ul&gt;
</description>
        </item>
        
    </channel>
</rss>
